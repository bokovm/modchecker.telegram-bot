package com.taipan.core.bot;

import com.taipan.shared.service.BotManagerService;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

@Slf4j
public abstract class BaseBot extends TelegramLongPollingBot {
    protected final String botId;
    protected final String botName;
    protected final BotManagerService botManagerService;

    public BaseBot(String token, String botId, String botName, BotManagerService botManagerService) {
        super(token);
        this.botId = botId;
        this.botName = botName;
        this.botManagerService = botManagerService;
    }

    @PostConstruct
    public void init() {
        log.info("üîÑ [{}] –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ '{}'...", botId, botName);

        try {
            // –î–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π (–æ—á–∏—Å—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –∏ —Ç.–¥.)
            preRegistration();

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Telegram
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(this);
            log.info("‚úÖ [{}] –ë–æ—Ç '{}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram", botId, botName);

            // –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ BotManagerService –∏ —Ç.–¥.)
            postRegistration();

            log.info("‚úÖ [{}] –ë–æ—Ç '{}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!", botId, botName);

        } catch (Exception e) {
            handleInitError(e);
        }
    }

    /**
     * –î–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞ –≤ Telegram
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    protected void preRegistration() throws Exception {
        // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –æ—á–∏—Å—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
        try {
            this.clearWebhook();
            log.debug("üîÑ [{}] –í–µ–±—Ö—É–∫ –æ—á–∏—â–µ–Ω", botId);
        } catch (Exception e) {
            if (shouldIgnoreWebhookError(e)) {
                log.debug("‚ö†Ô∏è [{}] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {}", botId, e.getMessage());
            } else {
                throw e;
            }
        }
    }

    /**
     * –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ Telegram
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    protected void postRegistration() throws Exception {
        // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–∞
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
     */
    protected void handleInitError(Exception e) {
        String errorType = classifyError(e);

        log.error("‚ùå [{}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ '{}'", botId, botName);
        log.error("üìã –¢–∏–ø –æ—à–∏–±–∫–∏: {}", errorType);
        log.error("üîß –î–µ—Ç–∞–ª–∏: {}", e.getMessage());
        log.error("üìö Stacktrace:", e);
    }

    /**
     * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
     */
    private String classifyError(Exception e) {
        if (e instanceof TelegramApiException) {
            String message = e.getMessage().toLowerCase();
            if (message.contains("invalid token")) return "–ù–ï–í–ï–†–ù–´–ô –¢–û–ö–ï–ù";
            if (message.contains("conflict")) return "–ö–û–ù–§–õ–ò–ö–¢ (–±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω)";
            if (message.contains("404")) return "–°–ï–¢–ï–í–ê–Ø –û–®–ò–ë–ö–ê (404)";
            if (message.contains("webhook")) return "–û–®–ò–ë–ö–ê –í–ï–ë–•–£–ö–ê";
        }
        return "–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê: " + e.getClass().getSimpleName();
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –≤–µ–±—Ö—É–∫–∞ –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
     */
    private boolean shouldIgnoreWebhookError(Exception e) {
        return e.getMessage() != null &&
                (e.getMessage().contains("404") ||
                        e.getMessage().contains("Conflict"));
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
    public String getBotId() {
        return botId;
    }

    public String getBotName() {
        return botName;
    }
}