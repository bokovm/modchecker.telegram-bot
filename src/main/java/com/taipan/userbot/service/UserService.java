package com.taipan.userbot.service;

import com.taipan.userbot.model.UserEntity;
import com.taipan.userbot.repository.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.objects.User;

@Service
public class UserService {

    private static final Logger logger = LoggerFactory.getLogger(UserService.class);
    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Transactional
    public UserEntity getOrCreateUser(User tgUser) {
        try {
            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId
            UserEntity user = userRepository.findByTelegramId(tgUser.getId());

            if (user == null) {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = new UserEntity();
                user.setTelegramId(tgUser.getId());
                user.setUsername(tgUser.getUserName());
                user.setFirstName(tgUser.getFirstName());
                user.setLastName(tgUser.getLastName());

                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                user = userRepository.save(user);
                logger.info("‚úÖ Created new user: ID={}, Username={}", user.getId(), user.getUsername());
            } else {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                boolean updated = false;

                if (!isEqual(user.getUsername(), tgUser.getUserName())) {
                    user.setUsername(tgUser.getUserName());
                    updated = true;
                }
                if (!isEqual(user.getFirstName(), tgUser.getFirstName())) {
                    user.setFirstName(tgUser.getFirstName());
                    updated = true;
                }
                if (!isEqual(user.getLastName(), tgUser.getLastName())) {
                    user.setLastName(tgUser.getLastName());
                    updated = true;
                }

                if (updated) {
                    user = userRepository.save(user);
                    logger.info("üîÑ Updated user: ID={}, Username={}", user.getId(), user.getUsername());
                }
            }
            return user;
        } catch (Exception e) {
            logger.error("‚ùå Error saving user: {}", tgUser.getId(), e);
            throw new RuntimeException("Failed to save user", e);
        }
    }

    private boolean isEqual(String str1, String str2) {
        if (str1 == null) return str2 == null;
        return str1.equals(str2);
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    public long countUsers() {
        return userRepository.count();
    }
}