package com.taipan.adminbot;

import com.taipan.adminbot.command.AdminSendCommand;
import com.taipan.adminbot.config.AdminBotConfig;
import com.taipan.shared.service.BotManagerService;
import jakarta.annotation.PostConstruct;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

@Component
public class AdminBotApplication extends TelegramLongPollingBot {
    private final AdminBotConfig config;
    private final AdminSendCommand sendCommand;
    private final String BOT_ID = "admin-bot";

    public AdminBotApplication(AdminBotConfig config,
                               AdminSendCommand sendCommand,
                               BotManagerService botManager) {
        super(config.getToken());
        this.config = config;
        this.sendCommand = sendCommand;
        botManager.registerBot(BOT_ID, this);
    }

    @PostConstruct
    public void init() {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(this);
            System.out.println("‚úÖ –ê–¥–º–∏–Ω –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram API!");
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–±–æ—Ç–∞: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return config.getUsername();
    }

    @Override
    public void onUpdateReceived(Update update) {
        System.out.println("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–±–æ—Ç–µ: " + update);

        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            System.out.println("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: " + text);

            if (text.startsWith("/sendmessage")) {
                sendCommand.handle(update.getMessage(), this);
            } else if (text.startsWith("/help")) {
                sendHelp(update.getMessage().getChatId());
            } else if (text.startsWith("/bots")) {
                listBots(update.getMessage().getChatId());
            }
        }
    }

    private void sendHelp(Long chatId) {
        String helpText = "üìö –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–±–æ—Ç–∞:\n\n" +
                "/sendmessage [@username|all] [bot-name] text - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                "/bots - –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤\n" +
                "/help - –ü–æ–º–æ—â—å";

        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(helpText)
                    .build());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void listBots(Long chatId) {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –∏–∑ BotManagerService
        String botsList = "ü§ñ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ—Ç—ã:\n\n" +
                "‚Ä¢ user-bot - –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" +
                "‚Ä¢ admin-bot - –ê–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç";

        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(botsList)
                    .build());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}